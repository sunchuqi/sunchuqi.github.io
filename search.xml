<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>记一次Excel导入内存溢出的优化</title>
    <url>/2021/01/05/%E8%AE%B0%E4%B8%80%E6%AC%A1Excel%E5%AF%BC%E5%85%A5%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E7%9A%84%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>​        <code>Excel</code>的导入导出功能在一个独立的应用中，各系统都在用，而且分配的内存有限，<code>JVM</code>给了 1G 多点，所以动不动就内存溢出了。至于为什么不调整内存，可能是强制要求写低内存的代码，上面大佬们的决定，也不好说什么，只能默默承受。</p>
<p>​        这不，业务刚导入了一个一个<code>3M</code>的<code>Excel</code>文件，系统监控立马告警<code>OOM</code>异常。为了保证下一次业务导入不出错，这活儿落到了我手上。</p>
<p>​        首先看了一下<code>dump</code>文件，溢出的原因的数组的扩容。也就是集合在不断扩容的过程中，导致<code>Eden Space</code>放不下新对象了，然后向<code>Old Gen</code>求救，结果<code>Old Gen</code>也放不下了，就抛异常了，唉，可怜的虚拟机，承担了太多。</p>
<p>​        集合不断扩容是因为<code>Excel</code>的解析，虽然<code>3M</code>的文件听起来不大，但是将里面的每个工作表，每行和每列转换成对象以后就不止是<code>3M</code>了。使用的工具库为<code>POI</code>，这个大家应该也熟悉，将<code>Excel</code>文件转换成<code>XML</code>字节流，然后使用<code>DOM</code>解析的方式将整个字节流转换成<code>Java</code>对象，全部放到内存中。</p>
<p>​        总结一下，内存溢出的原因主要是下面几点：</p>
<pre><code>    1. JVM 的内存本来就小
    2. 大数据量文件解析后被全部放到了 JVM Heap 中</code></pre>
<h3 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h3><ol>
<li><p>调整<code>JVM</code>内存，这个行不通的，按上面大佬的意思，给多大内存，如果代码不注意，都会溢出。所以这个方案是行不通的。</p>
</li>
<li><p>修改解析方式，<code>DOM</code>解析比较简单暴力，会将整个<code>XML</code>读入内存并构建一个<code>DOM</code>树，基于这棵树形结构对各个节点进行操作。<code>XML</code>文档中的每个成分都是一个节点：整个文档是一个文档节点，每个<code>XML</code>标签对应一个元素节点，包含在 <code>XML</code>标签的文件是文本节点，每一个<code>XML</code>属性是一个属性节点。 基于<code>DOM</code>树可以向上或者向下检索元素，缺点就是比较占内存。</p>
<p> <code>POI</code>还提供了基于事件模型的解析方式<code>SAX</code>，它并不需要将整个<code>XML</code>文档加载到内存中，而只需将<code>XML</code>文档的一部分加载到内存中，即可开始解析，在处理过程中并不会在内存中记录<code>XML</code>中的数据，所以占用的资源比较小。当程序处理过程中满足条件时，也可以立即停止解析过程，这样就不必解析剩余的<code>XML</code>内容。当解析到某类型节点时，会触发注册在该节点上的回调函数，我们可以根据自己的业务需求注册相应事件的回调函数，缺点就是要自己维护节点间的关系。</p>
</li>
<li><p>使用<code>Redis</code>进行风险转移，将解析后的数据和校验错误信息放入<code>Redis</code>中，保证<code>JVM</code>不会存在过多的对象。</p>
</li>
</ol>
<h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><p>​        修改解析方式，使用<code>SAX</code>解析方式解析<code>Excel</code>文件，将解析后的数据转换成对应的<code>Dto</code>放入集合中，这里要注意的是，如果数据量大的话，集合也会扩容，有溢出的危险，所以这里限定集合的数量到达<code>1000</code>后放入<code>Redis</code>中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">InputStream sheetStream = <span class="keyword">null</span>;</span><br><span class="line">OperationContentHandler operationContentHandler = <span class="keyword">null</span>;</span><br><span class="line">List&lt;DataDto&gt; dataList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">try</span> (OPCPackage opk = OPCPackage.open(in))&#123;</span><br><span class="line">	<span class="comment">//SAX解析excel</span></span><br><span class="line">	XSSFReader reader = <span class="keyword">new</span> XSSFReader(opk);</span><br><span class="line">           <span class="comment">//共享样式表</span></span><br><span class="line">	StylesTable stylesTable = reader.getStylesTable();</span><br><span class="line">           <span class="comment">//只读共享字符串表</span></span><br><span class="line">	ReadOnlySharedStringsTable sharedStringsTable = <span class="keyword">new</span> ReadOnlySharedStringsTable(opk);</span><br><span class="line">	<span class="comment">//获取到要解析的sheet流，XSSFReader在解析时会将sheet页按rId + sheetIndex排序，从1开始，当前要解析的数据在第二个sheet页，所以这里是rId2</span></span><br><span class="line">           sheetStream = reader.getSheet(<span class="string">&quot;rId2&quot;</span>);</span><br><span class="line">	<span class="comment">//创建解析器</span></span><br><span class="line">	XMLReader parser = SAXHelper.newXMLReader();</span><br><span class="line">	<span class="comment">//创建内容解析处理器，这个处理器是我自己实现的</span></span><br><span class="line">	operationContentHandler = <span class="keyword">new</span> OperationContentHandler(cacheService, dataList, cacheKey);</span><br><span class="line">           <span class="comment">//绑定处理器</span></span><br><span class="line">           parser.setContentHandler(<span class="keyword">new</span> XSSFSheetXMLHandler(stylesTable, sharedStringsTable, operationContentHandler, <span class="keyword">false</span>));</span><br><span class="line">           <span class="comment">//解析sheet流</span></span><br><span class="line">	parser.parse(<span class="keyword">new</span> InputSource(sheetStream));</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException | SAXException | OpenXML4JException | ParserConfigurationException e) &#123;</span><br><span class="line">	<span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;导入数据解析出错：&quot;</span>, e);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (sheetStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			sheetStream.close();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			logger.error(<span class="string">&quot;解析出错,流关闭失败&quot;</span>, e);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​        自己实现的内容处理器，实现<code>XSSFSheetXMLHandler.SheetContentsHandler</code>接口 ，主要是在解析<code>row</code>开始时，解析<code>row</code>结束时，解析每一个<code>cell</code>时添加自定义处理。其中大部分解析的处理都被<code>XSSFSheetXMLHandler</code>承包了，核心逻辑就是解析<code>XML</code>节点，有兴趣的看下源码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContentHandler</span> <span class="keyword">implements</span> <span class="title">XSSFSheetXMLHandler</span>.<span class="title">SheetContentsHandler</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> List&lt;DataDto&gt; dataList;</span><br><span class="line">    <span class="keyword">private</span> DataDto dataDto;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 解析行之前，参数是当前行的行号（从0开始）</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startRow</span><span class="params">(<span class="keyword">int</span> rowNum)</span></span>&#123;</span><br><span class="line">        dataDto.setRowNum(rowNum);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 解析行之后，参数是当前行的行号（从0开始）</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endRow</span><span class="params">(<span class="keyword">int</span> rowNum)</span></span>&#123;</span><br><span class="line">        <span class="comment">//这里所做的处理是解析行之后会判断解析的数据是否到达了一定的数量，比如10000</span></span><br><span class="line">        <span class="comment">//然后将DataDto转换为字符串放入了redis</span></span><br><span class="line">        <span class="keyword">if</span> (CollUtil.isNotEmpty(dataList) &amp;&amp; dataList.size() == <span class="number">1000</span>)&#123;</span><br><span class="line">				List&lt;DataDto&gt; notEmptyList = dataList.parallelStream()</span><br><span class="line">                    						.filter(dto -&gt; !dto.isEmpty())</span><br><span class="line">                    						.collect(Collectors.toList());</span><br><span class="line">				<span class="keyword">if</span> (notEmptyList.size() != dataList.size())&#123;</span><br><span class="line">					dataList = notEmptyList;</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				count += dataList.size();</span><br><span class="line">				cacheService.rpush(cacheKey, JSON.toJSONString(notEmptyList));</span><br><span class="line">				cacheService.expire(cacheKey, REDIS_EXPIRE_TIME);</span><br><span class="line">				dataList.clear();</span><br><span class="line">			&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 解析单元格</span></span><br><span class="line"><span class="comment">    * cellReference 单元格的坐标，参考excel表格中坐标，类似于A1,B2,C33这种，第一行从1开始，第一列是A</span></span><br><span class="line"><span class="comment">    * formattedValue 单元格内容</span></span><br><span class="line"><span class="comment">    * comment 单元格注释</span></span><br><span class="line"><span class="comment">    **/</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cell</span><span class="params">(String cellReference, String formattedValue, XSSFComment comment)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 解析页眉或页脚</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">headerFooter</span><span class="params">(String text, <span class="keyword">boolean</span> isHeader, String tagName)</span></span>&#123;</span><br><span class="line">         <span class="comment">//没做处理</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​        这里要注意的是，存入<code>redis</code>中的<code>key</code>一般是要设置一个失效时间的，不能依赖于其自身内存淘汰策略，尤其是这种大批量数据的情况，一是要设置失效时间，二是在必要操作完成之后执行删除操作。</p>
<p>​        在我写的<code>DataDto</code>里面，是有设置对应的行号，这样方便定位哪一行数据出现了问题。</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>​        之前使用<code>DOM</code>解析时，使用的测试参数为1024M，使用业务提供的<code>Excel</code>文件导入之后，马上就报<code>OOM</code>了。后续改为了<code>SAX</code>解析，使用400M的内存也毫无压力，甚至还有剩余，算是初步解决了这个导入的问题。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-Xms1024M</span><br><span class="line">-Xmx1024M</span><br><span class="line">-XX:+PrintGCDetails</span><br><span class="line">-XX:+HeapDumpOnOutOfMemoryError</span><br><span class="line">-XX:HeapDumpPath&#x3D;D:&#x2F;dump</span><br><span class="line">-Xloggc:D:&#x2F;dump&#x2F;heap_log.txt</span><br></pre></td></tr></table></figure>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol>
<li>开发时一定要注意大数量的情况，集合无节制的扩容是很容易导致内存溢出，同时扩容的动作也会损耗性能，初始化集合时尽量设定一个初始值。</li>
<li><code>DOM</code>和<code>SAX</code>解析都有其优越性，但也存在缺点，要分情况选择合适的解析方式。</li>
<li><code>Redis</code>的存储要避免非热点数据长时间占据内存，设置超时时间和及时删除<code>key</code>，每一块内存都很珍贵，要好好利用。</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>内存 Excel 导入</tag>
      </tags>
  </entry>
</search>
